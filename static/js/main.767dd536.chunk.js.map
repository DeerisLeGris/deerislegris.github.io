{"version":3,"sources":["Components/Navbar/FursuitProfile.js","Components/Navbar/BodyNavbar.js","Components/Navbar/TopNavbar.js","Components/Navbar.js","Components/Body.js","App.js","reportWebVitals.js","index.js"],"names":["FursuitProfile","name","image","maker","onClick","flexGrow","flexShrink","flexBasis","backgroundColor","flexDirection","alignItems","padding","borderRadius","src","height","marginLeft","fontSize","fontWeight","lineHeight","fontStyle","Skeletons","Array","from","Math","floor","random","keys","map","i","BodyNavbar","fursuitsData","fursuitsDataLoading","onFursuitSelected","imagesData","imagesDataLoading","onImageSelected","showMode","overflow","gridGap","fursuits","fursuit","slug","avatar","makers","id","fursuitMedia","thumbnail","cursor","TopNavbar","onSearch","onCancel","selectedFursuit","useState","searchValue","setSearchValue","handleKeyDown","useCallback","event","key","handleChange","target","value","handleSearchButton","handleCancelButton","justifyContent","placeholder","onChange","onKeyDown","width","h","size","Search","color","GET_FURSUITS","gql","GET_SELECTEDFURSUIT","GET_IMAGES","Navbar","isNavbarOpen","setNavbarOpen","viewMode","currentSearchValue","setCurrentSearchValue","currentShowMode","setCurrentShowMode","idfursuit","useParams","history","useHistory","useQuery","variables","limit","offset","skip","loading","data","error","selectedFursuitData","fursuitId","loadingImages","dataImages","getImagesFromId","push","getImageFromId","goBackToSearch","useEffect","isOpen","placement","onClose","borderBottomWidth","paddingTop","marginTop","marginBottom","boxShadow","zIndex","GET_IMAGE","MainView","children","updateNavbar","Body","idimage","medium","backgroundImage","picture","backgroundSize","backgroundPosition","backgroundRepeat","App","toggleNavbar","currentViewMode","useBreakpointValue","base","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","path","document","getElementById"],"mappings":"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","file":"static/js/main.767dd536.chunk.js","sourcesContent":["//Libraries\nimport { Flex, Image, Text } from \"@chakra-ui/react\";\n\nfunction FursuitProfile({name, image, maker, onClick}) {\n    return(\n        <Flex flexGrow={0} \n              flexShrink={0} \n              flexBasis=\"150px\" \n              backgroundColor=\"red.400\" \n              flexDirection=\"row\" \n              alignItems=\"center\" \n              padding=\"10px\" \n              borderRadius=\"15px\" \n              backgroundColor=\"lightgray\" \n              onClick={onClick} \n              cursor=\"pointer\">\n\n            <Image src={image} height=\"100\" borderRadius=\"15px\"/>\n            \n            <Flex marginLeft=\"10px\" flexDirection=\"column\">\n                <Text fontSize=\"1.8em\" fontWeight=\"bold\" lineHeight=\"1\">{name}</Text>\n                <Text fontSize=\"1.2em\" fontStyle=\"italic\">{maker}</Text>\n            </Flex>\n\n        </Flex>\n    )\n}\n\nexport default FursuitProfile;","//Libraries\nimport { Flex, Skeleton, Image } from \"@chakra-ui/react\";\n\nimport FursuitProfile from \"./FursuitProfile\";\n\n//Component with generated skeletons (between 1 and 11)\nconst Skeletons = () => {\n    return Array.from(Array(1 + Math.floor(Math.random() * 10)).keys()).map((i) => (\n        <Skeleton key={i} borderRadius=\"15px\" height=\"150px\"/>\n    ));\n}\n\n\nfunction BodyNavbar({fursuitsData, fursuitsDataLoading, onFursuitSelected, imagesData, imagesDataLoading, onImageSelected, showMode}) {\n\n    //Loading skeletons\n    if((showMode === \"images\" && imagesDataLoading) || (showMode === \"search\" && fursuitsDataLoading))\n        return(\n        <Flex flexDirection=\"column\" overflow=\"auto\" gridGap=\"10px\">\n            <Skeletons/>\n        </Flex>\n        )\n\n    //Show results (searchs results OR images results)\n    switch(showMode) {\n        case \"search\":\n            return(\n                <Flex flexDirection=\"column\" overflow=\"auto\" gridGap=\"10px\">\n                    {\n                        fursuitsData && fursuitsData.fursuits && fursuitsData.fursuits.map((fursuit) => (\n                            <FursuitProfile key={fursuit.id} \n                                            onClick={() => onFursuitSelected(fursuit.slug)} \n                                            name={fursuit.name} \n                                            image={fursuit.avatar} \n                                            maker={fursuit.makers[0] != null ? fursuit.makers[0].name : \"\"}\n                            />\n                        ))\n                    }\n                </Flex>\n            );\n            break;\n\n        case \"images\":\n            return(\n                <Flex flexDirection=\"column\" overflow=\"auto\" gridGap=\"10px\">\n                    {\n                        imagesData && imagesData.fursuitMedia && imagesData.fursuitMedia.map((image) => (\n                            <Image  key={image.id} \n                                    src={image.thumbnail} \n                                    onClick={() => onImageSelected(image.id)} \n                                    cursor=\"pointer\"\n                            />\n                        ))\n                    }\n                </Flex>\n            );\n            break;\n    }\n\n}\n\nexport default BodyNavbar;","//Libraries\nimport { Flex, Input, InputGroup, InputRightElement, Button, Image, CloseButton, Text } from \"@chakra-ui/react\";\nimport { SearchIcon } from '@chakra-ui/icons';\nimport React, { useState, useCallback } from 'react';\n\nfunction TopNavbar({onSearch, onCancel, showMode, selectedFursuit}) {\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const handleKeyDown = useCallback((event) => { \n        if(event.key === \"Enter\")\n            onSearch(searchValue);\n    }, [searchValue, onSearch]);\n\n    const handleChange = useCallback((event) => setSearchValue(event.target.value), []);\n\n    const handleSearchButton = useCallback(() => onSearch(searchValue), [searchValue, onSearch]);\n\n    const handleCancelButton = useCallback(() => onCancel(), [onCancel]);\n\n    return(\n        <Flex flexShrink={0} \n              flexDirection=\"column\" \n              alignItems=\"stretch\" \n              justifyContent=\"center\">\n            {\n                showMode === \"search\" && (\n                    <InputGroup>\n\n                        <Input placeholder=\"Search fursuit...\" \n                               value={searchValue} \n                               onChange={handleChange} \n                               onKeyDown={handleKeyDown}/>\n\n                        <InputRightElement width=\"4rem\">\n                            <Button h=\"1.75rem\" size=\"sm\" onClick={handleSearchButton}>\n                                <SearchIcon color=\"gray.300\"/>\n                            </Button>\n                        </InputRightElement>\n\n                    </InputGroup>\n                )\n            }\n\n            {\n                showMode === \"images\" && selectedFursuit && selectedFursuit.fursuit && (\n                    <Flex flexGrow={0} \n                        flexShrink={0} \n                        flexDirection=\"row\" \n                        alignItems=\"center\" \n                        borderRadius=\"15px\">\n\n                        <Image src={selectedFursuit.fursuit.avatar} height=\"50\" borderRadius=\"15px\"/>\n\n                        <Flex marginLeft=\"10px\" flexDirection=\"column\" flexGrow={1}>\n                            <Text fontWeight=\"bold\">{selectedFursuit.fursuit.name}</Text>\n                            <Text fontStyle=\"italic\">{selectedFursuit.fursuit.makers[0] != null ? selectedFursuit.fursuit.makers[0].name : \"\"}</Text>\n                        </Flex>\n\n                        <CloseButton onClick={handleCancelButton}/>\n\n                    </Flex>\n                )\n            }\n        </Flex>\n    )\n}\n\nexport default TopNavbar;","import { Flex, Divider, Drawer, DrawerOverlay, DrawerContent, DrawerBody, DrawerCloseButton, DrawerHeader } from \"@chakra-ui/react\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\n\nimport BodyNavbar from \"./Navbar/BodyNavbar\";\nimport TopNavbar from \"./Navbar/TopNavbar\";\n\nconst GET_FURSUITS = gql`query FursuitsTest($name: String, $maker: ID, $limit: Int!, $offset: Int!) {\n    fursuits(name: $name, maker: $maker, limit: $limit, offset: $offset) {\n      id\n      slug\n      name\n      makers {\n        name\n      }\n      avatar\n    }\n  }`;\n\nconst GET_SELECTEDFURSUIT = gql`query SelectedFursuit($id: ID!, $isModerator: Boolean) {\n    fursuit(id: $id, isModerator: $isModerator) {\n      id\n      name\n      makers {\n        name\n      }\n      avatar\n    }\n  }`;\n\nconst GET_IMAGES = gql`query FursuitMedia($fursuitId: ID!, $limit: Int!, $offset: Int!) {\n    fursuitMedia(fursuitId: $fursuitId, limit: $limit, offset: $offset) {\n      id\n      thumbnail\n    }\n  }`;\n\nfunction Navbar({isNavbarOpen, setNavbarOpen, viewMode}) {\n    const [currentSearchValue, setCurrentSearchValue] = useState(\"\");\n    const [currentShowMode, setCurrentShowMode] = useState(\"search\");\n\n    const {idfursuit} = useParams();\n    const history = useHistory();\n\n    const { loading, error, data } = useQuery(GET_FURSUITS, { \n      variables: { name: currentSearchValue, limit: 12, maker: \"\", offset: 0 },\n      skip: !currentSearchValue \n    });\n\n    const { data: selectedFursuitData } = useQuery(GET_SELECTEDFURSUIT, { \n      variables: { id: idfursuit }, \n      skip: !idfursuit \n    });\n\n    const { loading: loadingImages , error: errorImages, data: dataImages } = useQuery(GET_IMAGES, { \n      variables: { fursuitId: idfursuit, limit: 24, offset: 0 }, \n      skip: !idfursuit \n    });\n\n    const getImagesFromId = useCallback((id) => {\n        if(id)\n          history.push(\"/\" + id);\n    }, []);\n\n    const getImageFromId = useCallback((id) => {\n      if(id) {\n        history.push(\"/\" + idfursuit + \"/\" + id);\n\n        if(viewMode === \"mobile\") {\n          setNavbarOpen();\n        }\n      }\n        \n    }, [idfursuit, viewMode, setNavbarOpen]);\n\n    const goBackToSearch = useCallback(() => {\n        setCurrentShowMode(\"search\");\n    }, []);\n\n    useEffect(() => {\n      if(idfursuit) {\n        setCurrentShowMode(\"images\");\n      }\n    }, [idfursuit]);\n\n    if(viewMode === \"mobile\") {\n      return(\n        <Drawer isOpen={isNavbarOpen}\n                placement=\"left\"\n                onClose={() => setNavbarOpen()}\n                size=\"full\" >\n          \n          <DrawerOverlay/>\n          <DrawerContent>\n            <DrawerCloseButton/>\n            <DrawerHeader borderBottomWidth=\"1px\">Scritch.es viewer</DrawerHeader>\n\n            <DrawerBody paddingTop=\"20px\">\n              <TopNavbar showMode={currentShowMode} \n                          onSearch={setCurrentSearchValue} \n                          selectedFursuit={selectedFursuitData} \n                          onCancel={goBackToSearch}/>\n\n              <Divider marginTop=\"20px\" marginBottom=\"20px\"/>\n\n              <BodyNavbar showMode={currentShowMode} \n                          fursuitsData={data} \n                          fursuitsDataLoading={loading} \n                          imagesData={dataImages} \n                          imagesDataLoading={loadingImages} \n                          onFursuitSelected={getImagesFromId} \n                          onImageSelected={getImageFromId}/>\n            </DrawerBody>\n          </DrawerContent>\n\n        </Drawer>\n      );\n    }\n\n    return(\n        <Flex flexGrow={0} \n              flexShrink={0} \n              flexBasis=\"500px\" \n              flexDirection=\"column\" \n              padding=\"20px\" \n              boxShadow=\"0px 0px 15px 5px #000000\" \n              zIndex=\"1\">\n\n            <TopNavbar showMode={currentShowMode} \n                       onSearch={setCurrentSearchValue} \n                       selectedFursuit={selectedFursuitData} \n                       onCancel={goBackToSearch}/>\n\n            <Divider marginTop=\"20px\" marginBottom=\"20px\"/>\n\n            <BodyNavbar showMode={currentShowMode} \n                        fursuitsData={data} \n                        fursuitsDataLoading={loading} \n                        imagesData={dataImages} \n                        imagesDataLoading={loadingImages} \n                        onFursuitSelected={getImagesFromId} \n                        onImageSelected={getImageFromId}/>\n\n        </Flex>\n    )\n}\n\nexport default Navbar;","import { Flex, Text, Spinner, Button } from \"@chakra-ui/react\";\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { useQuery, useLazyQuery, gql } from \"@apollo/client\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useParams } from \"react-router-dom\";\n\nconst GET_IMAGE = gql`query Medium($id: ID!, $tagging: Boolean) {\n    medium(id: $id, tagging: $tagging) {\n      id\n      picture\n      createdAt\n    }\n  }`;\n\nconst MainView = ({viewMode, setNavbarOpen, children}) => {\n\n    const updateNavbar = useCallback(() => setNavbarOpen(), [setNavbarOpen]);\n\n    return(\n        <Flex flexGrow={1} \n               backgroundColor=\"gray.600\" \n               flexDirection=\"column\"\n               alignItems=\"stretch\">\n\n            {\n                viewMode === \"mobile\" && (\n                    <Flex flexShrink={0}\n                          flexBasis=\"100px\"\n                          alignItems=\"center\"\n                          justifyContent=\"flex-start\"\n                          padding=\"20px\">\n                        \n                        <Button size=\"lg\" onClick={updateNavbar}>\n                            <SearchIcon color=\"gray.500\"/>\n                        </Button>\n                    </Flex>\n                )\n            }\n\n            {children}\n        </Flex>\n    )\n};\n\nfunction Body({setNavbarOpen, viewMode}) {\n    const {idimage} = useParams();\n    const { loading, error, data } = useQuery(GET_IMAGE, { \n        variables: { id: idimage }, \n        skip: !idimage \n    });\n\n    if(loading) {\n        return(<MainView viewMode={viewMode} setNavbarOpen={setNavbarOpen}>\n            <Flex flexGrow={1} \n                backgroundColor=\"gray.600\" \n                alignItems=\"center\" \n                justifyContent=\"center\">\n\n                <Spinner size=\"xl\" color=\"whitesmoke\"/>\n\n            </Flex>\n        </MainView>);\n    }\n    \n    if(data && data.medium) {\n        return(<MainView viewMode={viewMode} setNavbarOpen={setNavbarOpen}>\n                    <Flex flexGrow={1}\n                            backgroundImage={\"url('\" + data.medium.picture + \"')\"} \n                            backgroundSize=\"contain\" backgroundPosition=\"center\" \n                            backgroundRepeat=\"no-repeat\" \n                            backgroundColor=\"gray.600\"/>\n               </MainView>);\n    }\n\n    return(<MainView viewMode={viewMode} setNavbarOpen={setNavbarOpen}>\n        <Flex flexGrow={1} \n                 backgroundColor=\"gray.600\" \n                 alignItems=\"center\" \n                 justifyContent=\"center\">\n\n            <Text color=\"whitesmoke\" fontSize=\"5xl\">Scritch.es viewer !</Text>\n\n        </Flex>\n    </MainView>);\n\n}\n\nexport default Body;","import { Flex } from \"@chakra-ui/react\";\nimport React, { useState, useCallback } from 'react';\nimport { useBreakpointValue } from '@chakra-ui/react';\n\nimport Navbar from \"./Components/Navbar\";\nimport Body from \"./Components/Body\";\n\nfunction App() {\n  const [isNavbarOpen, setNavbarOpen] = useState(false);\n  const toggleNavbar = useCallback(() => setNavbarOpen(!isNavbarOpen), [isNavbarOpen]);\n\n  const currentViewMode = useBreakpointValue({ base: \"mobile\", xl: \"pc\" })\n\n  return (\n    <Flex height=\"100vh\" flexDirection=\"row\" alignItems=\"stretch\">\n      <Navbar isNavbarOpen={isNavbarOpen} setNavbarOpen={toggleNavbar} viewMode={currentViewMode}/>\n      <Body setNavbarOpen={toggleNavbar} viewMode={currentViewMode}/>\n    </Flex>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nconst client = new ApolloClient({\n  uri: 'https://scritch.es/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <ChakraProvider>\n        <Router>\n          <Switch>\n            <Route path=\"/:idfursuit?/:idimage?\">\n              <App/>\n            </Route>\n          </Switch>\n        </Router>\n      </ChakraProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}